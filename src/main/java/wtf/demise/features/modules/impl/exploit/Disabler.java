package wtf.demise.features.modules.impl.exploit;

import lombok.Getter;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.*;
import wtf.demise.Demise;
import wtf.demise.events.annotations.EventTarget;
import wtf.demise.events.impl.misc.WorldChangeEvent;
import wtf.demise.events.impl.packet.PacketEvent;
import wtf.demise.events.impl.player.MotionEvent;
import wtf.demise.events.impl.player.UpdateEvent;
import wtf.demise.features.modules.Module;
import wtf.demise.features.modules.ModuleCategory;
import wtf.demise.features.modules.ModuleInfo;
import wtf.demise.features.modules.impl.combat.TimerRange;
import wtf.demise.features.modules.impl.player.Scaffold;
import wtf.demise.features.values.impl.BoolValue;
import wtf.demise.features.values.impl.MultiBoolValue;
import wtf.demise.utils.packet.PacketUtils;

import java.util.Arrays;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;

@ModuleInfo(name = "Disabler", description = "Disables parts of anticheats.", category = ModuleCategory.Exploit)
public class Disabler extends Module {
    public final MultiBoolValue options = new MultiBoolValue("Options", Arrays.asList(
            new BoolValue("Verus combat", false),
            new BoolValue("Post", false),
            new BoolValue("Vulcan scaffold", false),
            new BoolValue("Balance", false),
            new BoolValue("Saved balance", false)
    ), this);

    private final BoolValue sprint = new BoolValue("Sprint", false, this, () -> options.isEnabled("Vulcan scaffold"));
    private final BoolValue sneak = new BoolValue("Sneak", false, this, () -> options.isEnabled("Vulcan scaffold"));

    private boolean lastResult = false;
    public boolean disabled = false;
    @Getter
    private final CopyOnWriteArrayList<Packet<INetHandler>> storedPackets = new CopyOnWriteArrayList<>();
    @Getter
    private final ConcurrentLinkedDeque<Integer> pingPackets = new ConcurrentLinkedDeque<>();
    public boolean transaction;

    @EventTarget
    public void onWorld(WorldChangeEvent e) {
        disabled = false;
    }

    @EventTarget
    public void onUpdate(UpdateEvent e) {
        if (options.isEnabled("Vulcan scaffold")) {
            if (mc.thePlayer.isInWater() || mc.thePlayer.isOnLadder() || mc.thePlayer.isDead || mc.thePlayer.capabilities.allowFlying) {
                return;
            }

            Scaffold scaffold = getModule(Scaffold.class);

            if (sprint.get()) {
                PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
                PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
            }

            if (sneak.get()) {
                if (scaffold.mode.is("Telly") && mc.thePlayer.ticksExisted % 12 == 0 && rand.nextFloat() <= 0.7f) {
                    sendSneakPacket();
                }

                if (mc.thePlayer.onGround && scaffold.towering() || scaffold.towerMoving() && rand.nextFloat() <= 0.2f) {
                    sendSneakPacket();
                }

                if (mc.thePlayer.ticksExisted % 12 == 0 && mc.thePlayer.onGround && !(scaffold.towering() || scaffold.towerMoving())) {
                    sendSneakPacket();
                }
            }
        }

        if (options.isEnabled("Saved balance")) {
            mc.timer.timerSpeed = TimerRange.working ? 1 : 0.99f;
        }
    }

    private void sendSneakPacket() {
        PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
        PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
    }

    @EventTarget
    public void onMotion(MotionEvent event) {
        if (options.isEnabled("Post")) {
            if (event.isPre() && !getPost()) {
                processPackets();
            }
        }
    }

    @EventTarget
    public void onPacket(PacketEvent e) {
        if (mc.thePlayer == null) return;

        if (options.isEnabled("Verus combat")) {
            if (e.getPacket() instanceof S32PacketConfirmTransaction) {
                e.setCancelled(true);
                sendPacketNoEvent(new C0FPacketConfirmTransaction((transaction ? 1 : -1), (short) (transaction ? 1 : -1), transaction));
                transaction = !transaction;
            }
        }

        if (options.isEnabled("Balance")) {
            if (e.getPacket() instanceof C03PacketPlayer packet) {
                if (!packet.isMoving() && !packet.getRotating() && !mc.thePlayer.isUsingItem() && !Demise.INSTANCE.getModuleManager().getModule(Scaffold.class).isEnabled()) {
                    e.setCancelled(true);
                    TimerRange.balance--;
                }
            }
        }
    }

    public boolean postDelay(Packet<?> packet) {
        if (mc.thePlayer == null && !isEnabled(this.getClass())) {
            return false;
        }
        if (packet instanceof S12PacketEntityVelocity velocityPacket) {
            return velocityPacket.getEntityID() == mc.thePlayer.getEntityId();
        } else return packet instanceof S32PacketConfirmTransaction ||
                packet instanceof S22PacketMultiBlockChange ||
                packet instanceof S04PacketEntityEquipment ||
                packet instanceof S08PacketPlayerPosLook ||
                packet instanceof S06PacketUpdateHealth ||
                packet instanceof S23PacketBlockChange ||
                packet instanceof S27PacketExplosion ||
                packet instanceof S00PacketKeepAlive ||
                packet instanceof S0FPacketSpawnMob ||
                packet instanceof S14PacketEntity;
    }

    public void processPackets() {
        if (options.isEnabled("Post")) {
            if (!storedPackets.isEmpty()) {
                for (Packet<INetHandler> packet : storedPackets) {
                    PacketEvent event = new PacketEvent(packet, PacketEvent.State.INCOMING);

                    INSTANCE.getEventManager().call(event);

                    if (!event.isCancelled()) {
                        packet.processPacket(mc.getNetHandler());
                    }
                }
                storedPackets.clear();
            }
        }
    }

    public boolean getPost() {
        boolean result = mc.thePlayer != null && mc.thePlayer.isEntityAlive() && mc.thePlayer.ticksExisted >= 10 && !(mc.currentScreen instanceof GuiDownloadTerrain);
        if (this.lastResult && !result) {
            this.lastResult = false;
            mc.addScheduledTask(this::processPackets);
        }
        return this.lastResult = result;
    }
}
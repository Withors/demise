package wtf.demise.features.modules.impl.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import wtf.demise.events.annotations.EventTarget;
import wtf.demise.events.impl.packet.PacketEvent;
import wtf.demise.events.impl.player.MotionEvent;
import wtf.demise.features.modules.Module;
import wtf.demise.features.modules.ModuleCategory;
import wtf.demise.features.modules.ModuleInfo;
import wtf.demise.features.values.impl.ModeValue;

@ModuleInfo(name = "NoRot", category = ModuleCategory.Player)
public class NoRot extends Module {
    private final ModeValue mode = new ModeValue("Mode", new String[]{"Vanilla", "Packet", "Delay", "Legit", "Edit"}, "Vanilla", this);
    private Float yaw, pitch;
    private Float startingYaw, startingPitch;

    @EventTarget
    public void onPacketReceive(PacketEvent e) {
        if (e.getState() == PacketEvent.State.INCOMING) {
            final Packet<?> packet = e.getPacket();

            if (packet instanceof S08PacketPlayerPosLook teleport) {
                switch (mode.get()) {
                    case "Vanilla":
                        yaw = teleport.getYaw();
                        pitch = teleport.getYaw();

                        teleport.setYaw(mc.thePlayer.rotationYaw);
                        teleport.setPitch(mc.thePlayer.rotationPitch);
                        break;
                    case "Delay":
                        yaw = mc.thePlayer.rotationYaw;
                        pitch = mc.thePlayer.rotationPitch;
                        break;
                    case "Legit":
                        yaw = teleport.getYaw();
                        pitch = teleport.getPitch();
                        startingYaw = mc.thePlayer.rotationYaw;
                        startingPitch = mc.thePlayer.rotationPitch;

                        teleport.setYaw(mc.thePlayer.rotationYaw);
                        teleport.setPitch(mc.thePlayer.rotationPitch);
                        break;
                }
            }
        }
    }

    @EventTarget
    public void onPreMotion(MotionEvent ts) {
        if (ts.isPre()) {
            switch (mode.get()) {
                case "Delay":
                    if (yaw != null && pitch != null) {
                        mc.thePlayer.rotationYaw = yaw;
                        mc.thePlayer.rotationPitch = pitch;

                        yaw = null;
                        pitch = null;
                    }
                    break;

                case "Legit":
                    if (yaw != null && pitch != null && startingYaw != null && startingPitch != null) {
                        if (startingYaw == ts.getYaw() && startingPitch == ts.getPitch()) {
                            ts.setYaw(yaw);
                            ts.setPitch(pitch);
                        } else {
                            startingPitch = startingYaw = yaw = pitch = null;
                        }
                    }
                    break;
            }
        }
    }
}